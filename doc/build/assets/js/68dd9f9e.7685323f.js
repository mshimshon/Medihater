"use strict";(self.webpackChunkstatepulse_doc=self.webpackChunkstatepulse_doc||[]).push([[486],{2046:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"How to Use","title":"How to Use","description":"\ud83d\ude80 Get Started","source":"@site/docs/How to Use.md","sourceDirName":".","slug":"/how-to-use","permalink":"/how-to-use","draft":false,"unlisted":false,"editUrl":"https://github.com/mshimshon/MediHater/docs/How to Use.md","tags":[{"inline":true,"label":"blazor","permalink":"/tags/blazor"},{"inline":true,"label":"dependency-injection","permalink":"/tags/dependency-injection"},{"inline":true,"label":"MediHater","permalink":"/tags/medi-hater"},{"inline":true,"label":"component-patterns","permalink":"/tags/component-patterns"},{"inline":true,"label":"scoped","permalink":"/tags/scoped"},{"inline":true,"label":"transient","permalink":"/tags/transient"},{"inline":true,"label":".net","permalink":"/tags/net"},{"inline":true,"label":"csharp","permalink":"/tags/csharp"}],"version":"current","sidebarPosition":3,"frontMatter":{"slug":"how-to-use","title":"How to Use","tags":["blazor","dependency-injection","MediHater","component-patterns","scoped","transient",".net","csharp"],"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"What\'s MediHater","permalink":"/"}}');var t=n(4848),a=n(8453);const l={slug:"how-to-use",title:"How to Use",tags:["blazor","dependency-injection","MediHater","component-patterns","scoped","transient",".net","csharp"],sidebar_position:3},s=void 0,d={},o=[{value:"\ud83d\ude80 Get Started",id:"-get-started",level:2},{value:"Migration from MediatR",id:"migration-from-mediatr",level:3},{value:"Register Services",id:"register-services",level:3},{value:"Manual Registration",id:"manual-registration",level:4},{value:"Auto Scan",id:"auto-scan",level:4},{value:"Request/Handlers",id:"requesthandlers",level:2},{value:"Void Task Request",id:"void-task-request",level:3},{value:"Request Task with result",id:"request-task-with-result",level:3},{value:"Send the Request",id:"send-the-request",level:3},{value:"Notifications",id:"notifications",level:2},{value:"Define the Notification",id:"define-the-notification",level:3},{value:"Performance &amp; Customization",id:"performance--customization",level:2},{value:"How the Pipeline Works",id:"how-the-pipeline-works",level:3},{value:"Customize Your Pipeline",id:"customize-your-pipeline",level:3},{value:"Publish Middleware Strategies",id:"publish-middleware-strategies",level:3},{value:"<code>WaitMiddleBeforePulish_To_TriggerNotificationHandlers</code>",id:"waitmiddlebeforepulish_to_triggernotificationhandlers",level:4},{value:"<code>TriggerNotificationHandler_Then_AwaitForBoth</code> (Default)",id:"triggernotificationhandler_then_awaitforboth-default",level:4},{value:"Notification Publish Strategies",id:"notification-publish-strategies",level:3},{value:"<code>NotificationFireMode = PipelineNotificationFireMode.FireAndForget</code> (Default)",id:"notificationfiremode--pipelinenotificationfiremodefireandforget-default",level:4},{value:"<code>NotificationFireMode = PipelineNotificationFireMode.FireAllAndAwait</code>",id:"notificationfiremode--pipelinenotificationfiremodefireallandawait",level:4},{value:"<code>NotificationFireMode = PipelineNotificationFireMode.FireOneAndAwait</code>",id:"notificationfiremode--pipelinenotificationfiremodefireoneandawait",level:4},{value:"Pipeline Notification Middleware Options",id:"pipeline-notification-middleware-options",level:3},{value:"<code>NeverAwaitMiddlewares</code>",id:"neverawaitmiddlewares",level:4},{value:"<code>OnlyAwaitOrderedExecuted</code> (Default)",id:"onlyawaitorderedexecuted-default",level:4},{value:"<code>AwaitAllMiddlewares</code>",id:"awaitallmiddlewares",level:4},{value:"Middleware Settings",id:"middleware-settings",level:3},{value:"Caching Settings",id:"caching-settings",level:3},{value:"<code>EagerCaching</code>",id:"eagercaching",level:4},{value:"<code>LazyCaching</code> (Default)",id:"lazycaching-default",level:4}];function c(e){const i={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-get-started",children:"\ud83d\ude80 Get Started"}),"\n",(0,t.jsx)(i.p,{children:"Use the same patterns you know from MediatR, but with Mediahater interfaces and classes."}),"\n",(0,t.jsx)(i.p,{children:"For Full Package:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"dotnet add package Mediahater\n"})}),"\n",(0,t.jsx)(i.p,{children:"For Abstractive-only Package:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"dotnet add package Mediahater.Abstractions\n"})}),"\n",(0,t.jsx)(i.h3,{id:"migration-from-mediatr",children:"Migration from MediatR"}),"\n",(0,t.jsx)(i.p,{children:"Unless you use Pipleline features from MediatR you should be able to substitute their code for ours."}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Do NOT"})," do this on your main branch. Always back up your project or work in a separate branch."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Search for all ",(0,t.jsx)(i.code,{children:"MediatR."})," adn replace with ",(0,t.jsx)(i.code,{children:"Medihater."}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Search for all ",(0,t.jsx)(i.code,{children:"IMediator"})," and replace with ",(0,t.jsx)(i.code,{children:"IMedihator"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"register-services",children:"Register Services"}),"\n",(0,t.jsx)(i.p,{children:"Mediahater uses a different pattern when it comes the service registration."}),"\n",(0,t.jsx)(i.h4,{id:"manual-registration",children:"Manual Registration"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"    services.AddMedihaterServices();\r\n    // With Return Value\r\n    services.AddMedihaterRequestHandler<GetArticleQuery, GetArticleHandler, ArticleResponse>();\r\n    services.AddMedihaterRequestHandler<CreateArticleCommand, CreateArticleHandler>();\r\n\r\n    // Add Notifications\r\n    services.AddMedihaterNotificationHandler<SpreadMeNotification, SpreadListennerOneHandler>();\r\n    services.AddMedihaterNotificationHandler<SpreadMeNotification, SpreadListennerTwoHandler>();\n"})}),"\n",(0,t.jsx)(i.h4,{id:"auto-scan",children:"Auto Scan"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"    services.AddMedihaterServices(cfg =>\r\n    {\r\n        cfg.AssembliesScan = [\r\n            typeof(Program)\r\n        ];\r\n    });\n"})}),"\n",(0,t.jsx)(i.h2,{id:"requesthandlers",children:"Request/Handlers"}),"\n",(0,t.jsx)(i.h3,{id:"void-task-request",children:"Void Task Request"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"public record CreateArticleCommand : IRequest\r\n{\r\n    public string Title { get; init; } = default!;\r\n    public string Description { get; init; } = default!;\r\n}\r\n\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"\r\ninternal class CreateArticleHandler : IRequestHandler<CreateArticleCommand>\r\n{\r\n    public async Task Handle(CreateArticleCommand request, CancellationToken cancellationToken)\r\n    {\r\n        await Task.Delay(100);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"request-task-with-result",children:"Request Task with result"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"public record ArticleResponse\r\n{\r\n    public string Title { get; init; } = default!;\r\n    public string Description { get; init; } = default!;\r\n}\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"public record GetArticleQuery(string Id) : IRequest<ArticleResponse>\r\n{\r\n\r\n}\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'internal class GetArticleHandler : IRequestHandler<GetArticleQuery, ArticleResponse>\r\n{\r\n    public async Task<ArticleResponse> Handle(GetArticleQuery request, CancellationToken cancellationToken)\r\n    {\r\n        await Task.Delay(500);\r\n\r\n        return new ArticleResponse()\r\n        {\r\n            Description = "My Description",\r\n            Title = "The Title"\r\n        };\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"send-the-request",children:"Send the Request"}),"\n",(0,t.jsxs)(i.p,{children:["Use the usual ",(0,t.jsx)(i.code,{children:"IMedihator.Send"})," to call handler."]}),"\n",(0,t.jsx)(i.p,{children:"Sending without Data Resukt:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'    _medihater = _serviceProvider.GetRequiredService<IMedihater>();\r\n    var command = new CreateArticleCommand() {\r\n        Title = "",\r\n        Description = ""\r\n    };\r\n    await _medihater.Send(command);\n'})}),"\n",(0,t.jsx)(i.p,{children:"Sending wiht Data Result:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'    _medihater = _serviceProvider.GetRequiredService<IMedihater>();\r\n    var response = await _medihater.Send(new GetArticleQuery("dsad"));\n'})}),"\n",(0,t.jsx)(i.h2,{id:"notifications",children:"Notifications"}),"\n",(0,t.jsx)(i.h3,{id:"define-the-notification",children:"Define the Notification"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"public record SpreadMeNotification(string Message) : INotification\r\n{\r\n}\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"internal class SpreadListennerOneHandler : INotificationHandler<SpreadMeNotification>\r\n{\r\n    public async Task Handle(SpreadMeNotification notification, CancellationToken cancellationToken)\r\n    {\r\n        await Task.Delay(500);\r\n        // my first hook\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'internal class SpreadListennerOneHandler : INotificationHandler<SpreadMeNotification>\r\n{\r\n    public async Task Handle(SpreadMeNotification notification, CancellationToken cancellationToken)\r\n    {\r\n        await Task.Delay(500);\r\n        // My second hook\r\n    }\r\n}\r\n\r\n### Publish Notification\r\nUse the usual ```IMedihator.Publish``` to call handler.\r\n\r\n```csharp\r\n    _medihater = _serviceProvider.GetRequiredService<IMedihater>();\r\n    var notification = new SpreadMeNotification("My Message");\r\n    await _medihater.Publish(notification); \n'})}),"\n",(0,t.jsx)(i.h2,{id:"performance--customization",children:"Performance & Customization"}),"\n",(0,t.jsxs)(i.p,{children:["There are several ways you can optimize and control how the pipeline behaves in ",(0,t.jsx)(i.strong,{children:"Mediahater"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Out of the box, ",(0,t.jsx)(i.strong,{children:"Mediahater"})," is highly optimized. During development, we went from being ",(0,t.jsx)(i.strong,{children:"5.65\xd7 slower"})," than MediatR to approximately ",(0,t.jsx)(i.strong,{children:"1.16\xd7 faster"})," than MediatR for equivalent dispatch operations."]}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsx)(i.p,{children:"I\u2019m not a benchmarking guru, but the results look very promising."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"how-the-pipeline-works",children:"How the Pipeline Works"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["We use ",(0,t.jsx)(i.strong,{children:"interface-based middleware"})," to pass down events."]}),"\n",(0,t.jsxs)(i.li,{children:["Middlewares are intended to be used as ",(0,t.jsx)(i.strong,{children:"auditors only"}),"."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"customize-your-pipeline",children:"Customize Your Pipeline"}),"\n",(0,t.jsx)(i.p,{children:"You have options to define how the pipeline behaves:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Set ",(0,t.jsx)(i.strong,{children:"PipelineNotificationMiddleware"})," strategy:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"NeverAwaitMiddlewares"})}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"OnlyAwaitOrderedExecuted"})," (Default)"]}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"AwaitAllMiddlewares"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Choose how publish middleware interacts with handlers:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"WaitMiddleBeforePulish_To_TriggerNotificationHandlers"})}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"TriggerNotificationHandler_Then_AwaitForBoth"})," (Default)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.li,{children:"Control request and notification flow."}),"\n",(0,t.jsx)(i.li,{children:"Select invocation strategies based on your performance needs."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"publish-middleware-strategies",children:"Publish Middleware Strategies"}),"\n",(0,t.jsx)(i.h4,{id:"waitmiddlebeforepulish_to_triggernotificationhandlers",children:(0,t.jsx)(i.code,{children:"WaitMiddleBeforePulish_To_TriggerNotificationHandlers"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Executes ",(0,t.jsx)(i.code,{children:"IPublishMiddleware.BeforePublish"})," and ",(0,t.jsx)(i.strong,{children:"awaits"})," all middlewares before publishing notifications."]}),"\n",(0,t.jsxs)(i.li,{children:["Guarantees middlewares complete ",(0,t.jsx)(i.strong,{children:"before"})," any handlers execute."]}),"\n",(0,t.jsx)(i.li,{children:"Good for strict ordering and consistency."}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"triggernotificationhandler_then_awaitforboth-default",children:[(0,t.jsx)(i.code,{children:"TriggerNotificationHandler_Then_AwaitForBoth"})," (Default)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Runs all middlewares, then notifications, then awaits everything together."}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"No guarantee"})," that middleware completes before its associated handler executes."]}),"\n",(0,t.jsx)(i.li,{children:"Higher concurrency, less consistency."}),"\n"]}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Note:"})," The ",(0,t.jsx)(i.code,{children:"PipelineNotificationMiddleware"})," setting affects this behavior."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"notification-publish-strategies",children:"Notification Publish Strategies"}),"\n",(0,t.jsxs)(i.h4,{id:"notificationfiremode--pipelinenotificationfiremodefireandforget-default",children:[(0,t.jsx)(i.code,{children:"NotificationFireMode = PipelineNotificationFireMode.FireAndForget"})," (Default)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Publish Notifications if it fails you don't care."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"notificationfiremode--pipelinenotificationfiremodefireallandawait",children:(0,t.jsx)(i.code,{children:"NotificationFireMode = PipelineNotificationFireMode.FireAllAndAwait"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Publish Notification to all related handlers and await for all to finish."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"notificationfiremode--pipelinenotificationfiremodefireoneandawait",children:(0,t.jsx)(i.code,{children:"NotificationFireMode = PipelineNotificationFireMode.FireOneAndAwait"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Publish Notification to each of the related handlers and await."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"pipeline-notification-middleware-options",children:"Pipeline Notification Middleware Options"}),"\n",(0,t.jsx)(i.h4,{id:"neverawaitmiddlewares",children:(0,t.jsx)(i.code,{children:"NeverAwaitMiddlewares"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Fire-and-forget \u2014 does ",(0,t.jsx)(i.strong,{children:"not await"})," middlewares."]}),"\n",(0,t.jsxs)(i.li,{children:["Can cause inconsistencies such as ",(0,t.jsx)(i.code,{children:"AfterPublish"})," triggering before ",(0,t.jsx)(i.code,{children:"BeforePublish"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"Best for maximum speed, parallel scenarios."}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"onlyawaitorderedexecuted-default",children:[(0,t.jsx)(i.code,{children:"OnlyAwaitOrderedExecuted"})," (Default)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Awaits ",(0,t.jsx)(i.strong,{children:"ordered execution"}),", guaranteeing ",(0,t.jsx)(i.code,{children:"BeforePublish"})," completes before publishing starts."]}),"\n",(0,t.jsx)(i.li,{children:"Balanced performance and consistency."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"awaitallmiddlewares",children:(0,t.jsx)(i.code,{children:"AwaitAllMiddlewares"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Awaits ",(0,t.jsx)(i.strong,{children:"everything"})," (Before + After + all notifications)."]}),"\n",(0,t.jsx)(i.li,{children:"Highest consistency, but adds overhead."}),"\n",(0,t.jsx)(i.li,{children:"The more middlewares, the slower it gets."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"middleware-settings",children:"Middleware Settings"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"    services.AddMedihaterServices(o =>\r\n    {\r\n        o.MiddlewareAwaitMode = Configuraions.Enums.PipelineMiddlewareWaitMode.NeverAwaitMiddlewares;\r\n        o.NotificationMiddleware = Configuraions.Enums.PipelineNotificationMiddleware.TriggerNotificationHandler_Then_AwaitForBoth;\r\n    });\n"})}),"\n",(0,t.jsx)(i.h3,{id:"caching-settings",children:"Caching Settings"}),"\n",(0,t.jsx)(i.h4,{id:"eagercaching",children:(0,t.jsx)(i.code,{children:"EagerCaching"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Cache all at startup"}),"\n",(0,t.jsx)(i.li,{children:"Heavy traffic or low-latency APIs where every millisecond matters."}),"\n",(0,t.jsx)(i.li,{children:"Systems where handlers are stable and known at startup."}),"\n"]}),"\n",(0,t.jsxs)(i.h4,{id:"lazycaching-default",children:[(0,t.jsx)(i.code,{children:"LazyCaching"})," (Default)"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Cache as you go."}),"\n",(0,t.jsx)(i.li,{children:"Apps with many handlers but rarely hit all of them."}),"\n",(0,t.jsx)(i.li,{children:"Low/medium traffic environments where startup time matters more than first-call performance."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"    services.AddMedihaterServices(o =>\r\n    {\r\n        o.CachingMode = Configuraions.Enums.PipelineCachingMode.LazyCaching;\r\n    });\n"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>s});var r=n(6540);const t={},a=r.createContext(t);function l(e){const i=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:i},e.children)}}}]);